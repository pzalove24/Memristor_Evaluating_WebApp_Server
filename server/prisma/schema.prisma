// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// model User {
//   id        String    @id @default(cuid())
//   username  String    @unique
//   email     String    @unique
//   posts     Post[] // User can have multiple posts
//   comments  Comment[] // User can leave multiple comments
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// model Post {
//   id        String    @id @default(cuid())
//   title     String
//   content   String
//   author    User      @relation(fields: [authorId], references: [id])
//   authorId  String
//   comments  Comment[] // Post can have multiple comments
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
// }

// model Comment {
//   id        String   @id @default(cuid())
//   text      String
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  String
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

//---------------------------------------------------//

model BenchmarkType {
  id                    String                 @id @default(cuid())
  benchmarkMethods      BenchmarkMethod[]
  benchmarkInputs       BenchmarkInput[]
  benchmarkInformations BenchmarkInformation[]
  active                Boolean                @default(true)
  benchmarkTypeName     String                 @unique
  voltageType           String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model BenchmarkInformation {
  id                String            @id @default(cuid())
  benchmarkMethods  BenchmarkMethod[]
  active            Boolean           @default(true)
  benchmarkInfoName String            @unique
  abbreviation      String
  voltageType       String
  BenchmarkType     BenchmarkType     @relation(fields: [benchmarkTypeId], references: [id])
  benchmarkTypeId   String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

// Benchmark Input

model BenchmarkInput {
  id                   String                @id @default(cuid())
  // benchmarkInputTags   BenchmarkInputTag[]
  benchmarkInputSetups BenchmarkInputSetup[]
  active               Boolean               @default(true)
  benchmarkInputName   String                @unique
  voltageType          String
  BenchmarkMethod      BenchmarkMethod[]
  BenchmarkType        BenchmarkType         @relation(fields: [benchmarkTypeId], references: [id])
  benchmarkTypeId      String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  // benchmarkInformationId String
}

// model BenchmarkInputTag {
//   benchmarkInputTagId String         @id @default(cuid())
//   tagName             String
//   tagIndication       String
//   BenchmarkInput      BenchmarkInput @relation(fields: [benchmarkInputId], references: [benchmarkInputId])
//   benchmarkInputId    String
//   createdAt           DateTime       @default(now())
//   updatedAt           DateTime       @updatedAt
// }

model BenchmarkInputSetup {
  id                      String         @id @default(cuid())
  BenchmarkUnit           BenchmarkUnit  @relation(fields: [benchmarkUnitId], references: [id])
  benchmarkUnitId         String
  benchmarkInputSetupName String        
  voltageType             String
  dataType                String
  decimalNumber           Int
  exampleData             String
  upperLimit              Float
  lowerLimit              Float
  stepIncreasing          Float
  BenchmarkInput          BenchmarkInput @relation(fields: [benchmarkInputId], references: [id])
  benchmarkInputId        String
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
}

model BenchmarkUnit {
  id                  String                @id @default(cuid())
  unitName            String                @unique
  unitType            String
  benchmarkSetupType  String
  BenchmarkInputSetup BenchmarkInputSetup[]
  BenchmarkMethod     BenchmarkMethod[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model BenchmarkMethod {
  id                     String               @id @default(cuid())
  BenchmarkInput         BenchmarkInput       @relation(fields: [benchmarkInputId], references: [id])
  benchmarkInputId       String
  BenchmarkUnit          BenchmarkUnit?       @relation(fields: [benchmarkUnitId], references: [id])
  benchmarkUnitId        String?
  active                 Boolean              @default(false)
  benchmarkMethodName    String               @unique
  methodType             String //graph // calculation
  voltageType            String
  beforeBenchmark        Boolean
  inSoftware             Boolean
  BenchmarkInformation   BenchmarkInformation @relation(fields: [benchmarkInformationId], references: [id])
  benchmarkInformationId String               @unique
  BenchmarkType          BenchmarkType        @relation(fields: [benchmarkTypeId], references: [id])
  benchmarkTypeId        String
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
}

// Benchmark Result

model BenchmarkResult {
  id            String   @id @default(cuid())
  benchmarkName String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SetResetVoltageDefinition {
  id              String           @id @default(cuid())
  paperReferences paperReference[]
  defName         String           @unique
  condition       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model paperReference {
  id                          String                     @id @default(cuid())
  SetResetVoltageDefinition   SetResetVoltageDefinition? @relation(fields: [setResetVoltageDefinitionId], references: [id])
  setResetVoltageDefinitionId String?
  article                     String
  url                         String
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @updatedAt
}

// tag unique

// model Benchmark {
//   id                String            @id @default(uuid())
//   name              String
//   Hardware          String
//   Waveform          WaveformBenchmark @relation(fields: [WaveformId], references: [id])
//   WaveformId        String
//   BenchmarkResult   BenchmarkResult   @relation(fields: [BenchmarkResultId], references: [id])
//   BenchmarkResultId String
//   createdAt         DateTime          @default(now())
// }

// model BenchmarkResult {
//   id                      String                @id @default(uuid())
//   Benchmark               Benchmark[]
//   StandardBenchmark       StandardBenchmark     @relation(fields: [StandardBenchmarkId], references: [id])
//   StandardBenchmarkId     String
//   StabilityBenchmark      StabilityBenchmark    @relation(fields: [StabilityBenchmarkId], references: [id])
//   StabilityBenchmarkId    String
//   BiorealisticBenchmark   BiorealisticBenchmark @relation(fields: [BiorealisticBenchmarkId], references: [id])
//   BiorealisticBenchmarkId String
//   AdvancedBenchmark       AdvancedBenchmark     @relation(fields: [AdvancedBenchmarkId], references: [id])
//   AdvancedBenchmarkId     String
//   createdAt               DateTime              @default(now())
// }

// model StandardBenchmark {
//   id              String            @id @default(uuid())
//   createdAt       DateTime          @default(now())
//   BenchmarkResult BenchmarkResult[]
// }

// model StabilityBenchmark {
//   id              String            @id @default(uuid())
//   createdAt       DateTime          @default(now())
//   BenchmarkResult BenchmarkResult[]
// }

// model BiorealisticBenchmark {
//   id              String            @id @default(uuid())
//   createdAt       DateTime          @default(now())
//   BenchmarkResult BenchmarkResult[]
// }

// model AdvancedBenchmark {
//   id              String            @id @default(uuid())
//   createdAt       DateTime          @default(now())
//   BenchmarkResult BenchmarkResult[]
// }

// model WaveformBenchmark {
//   id        String      @id @default(uuid())
//   Benchmark Benchmark[]
//   createdAt DateTime    @default(now())
// }

// model HardwareBenchmark {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
// }

//** input จะมีหลายค่าให้กรอก เราจึงมี input setup ที่เก็บพวกค่าที่จะกรอก //
// เดี๋ยวใช้ collapse
// ใน input สามารถ inactive switch ได้ เพื่อปิดการกรอกค่านั้น
